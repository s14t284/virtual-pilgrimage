// Mocks generated by Mockito 5.3.0 from annotations
// in virtualpilgrimage/test/domain/auth/sign_in_interactor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:virtualpilgrimage/domain/user/user_repository.dart' as _i6;
import 'package:virtualpilgrimage/domain/user/virtual_pilgrimage_user.codegen.dart'
    as _i7;
import 'package:virtualpilgrimage/infrastructure/auth/email_and_password_auth_repository.dart'
    as _i2;
import 'package:virtualpilgrimage/infrastructure/auth/google_auth_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EmailAndPasswordAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailAndPasswordAuthRepository extends _i1.Mock
    implements _i2.EmailAndPasswordAuthRepository {
  MockEmailAndPasswordAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.UserCredential?> signIn({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue:
              _i3.Future<_i4.UserCredential?>.value()) as _i3
          .Future<_i4.UserCredential?>);
}

/// A class which mocks [GoogleAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthRepository extends _i1.Mock
    implements _i5.GoogleAuthRepository {
  MockGoogleAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.UserCredential?> signIn({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue:
              _i3.Future<_i4.UserCredential?>.value()) as _i3
          .Future<_i4.UserCredential?>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i7.VirtualPilgrimageUser?> get(String? userId) =>
      (super.noSuchMethod(Invocation.method(#get, [userId]),
              returnValue: _i3.Future<_i7.VirtualPilgrimageUser?>.value())
          as _i3.Future<_i7.VirtualPilgrimageUser?>);
  @override
  _i3.Future<_i7.VirtualPilgrimageUser?> findWithNickname(String? nickname) =>
      (super.noSuchMethod(Invocation.method(#findWithNickname, [nickname]),
              returnValue: _i3.Future<_i7.VirtualPilgrimageUser?>.value())
          as _i3.Future<_i7.VirtualPilgrimageUser?>);
  @override
  _i3.Future<void> update(_i7.VirtualPilgrimageUser? user) =>
      (super.noSuchMethod(Invocation.method(#update, [user]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
}
