// Mocks generated by Mockito 5.3.0 from annotations
// in virtualpilgrimage/test/helper/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:typed_data' as _i12;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i3;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_crashlytics/firebase_crashlytics.dart' as _i8;
import 'package:flutter/foundation.dart' as _i10;
import 'package:google_sign_in/google_sign_in.dart' as _i5;
import 'package:google_sign_in_platform_interface/google_sign_in_platform_interface.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeActionCodeInfo_1 extends _i1.SmartFake
    implements _i3.ActionCodeInfo {
  _FakeActionCodeInfo_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUserCredential_2 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeConfirmationResult_3 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUserMetadata_4 extends _i1.SmartFake implements _i3.UserMetadata {
  _FakeUserMetadata_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMultiFactor_5 extends _i1.SmartFake implements _i4.MultiFactor {
  _FakeMultiFactor_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIdTokenResult_6 extends _i1.SmartFake implements _i3.IdTokenResult {
  _FakeIdTokenResult_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUser_7 extends _i1.SmartFake implements _i4.User {
  _FakeUser_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeGoogleSignInAuthentication_8 extends _i1.SmartFake
    implements _i5.GoogleSignInAuthentication {
  _FakeGoogleSignInAuthentication_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSettings_9 extends _i1.SmartFake implements _i6.Settings {
  _FakeSettings_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCollectionReference_10<T extends Object?> extends _i1.SmartFake
    implements _i7.CollectionReference<T> {
  _FakeCollectionReference_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWriteBatch_11 extends _i1.SmartFake implements _i7.WriteBatch {
  _FakeWriteBatch_11(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLoadBundleTask_12 extends _i1.SmartFake
    implements _i7.LoadBundleTask {
  _FakeLoadBundleTask_12(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_13<T extends Object?> extends _i1.SmartFake
    implements _i7.QuerySnapshot<T> {
  _FakeQuerySnapshot_13(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQuery_14<T extends Object?> extends _i1.SmartFake
    implements _i7.Query<T> {
  _FakeQuery_14(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentReference_15<T extends Object?> extends _i1.SmartFake
    implements _i7.DocumentReference<T> {
  _FakeDocumentReference_15(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_16 extends _i1.SmartFake
    implements _i7.SnapshotMetadata {
  _FakeSnapshotMetadata_16(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFirebaseFirestore_17 extends _i1.SmartFake
    implements _i7.FirebaseFirestore {
  _FakeFirebaseFirestore_17(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_18<T extends Object?> extends _i1.SmartFake
    implements _i7.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_18(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseCrashlytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCrashlytics extends _i1.Mock
    implements _i8.FirebaseCrashlytics {
  MockFirebaseCrashlytics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
          returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)))
      as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  bool get isCrashlyticsCollectionEnabled =>
      (super.noSuchMethod(Invocation.getter(#isCrashlyticsCollectionEnabled),
          returnValue: false) as bool);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i9.Future<bool> checkForUnsentReports() =>
      (super.noSuchMethod(Invocation.method(#checkForUnsentReports, []),
          returnValue: _i9.Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  void crash() => super.noSuchMethod(Invocation.method(#crash, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<void> deleteUnsentReports() => (super.noSuchMethod(
      Invocation.method(#deleteUnsentReports, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<bool> didCrashOnPreviousExecution() =>
      (super.noSuchMethod(Invocation.method(#didCrashOnPreviousExecution, []),
          returnValue: _i9.Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<void> recordError(dynamic exception, StackTrace? stack,
          {dynamic reason,
          Iterable<_i10.DiagnosticsNode>? information = const [],
          bool? printDetails,
          bool? fatal = false}) =>
      (super.noSuchMethod(
              Invocation.method(#recordError, [
                exception,
                stack
              ], {
                #reason: reason,
                #information: information,
                #printDetails: printDetails,
                #fatal: fatal
              }),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> recordFlutterError(
          _i10.FlutterErrorDetails? flutterErrorDetails,
          {bool? fatal = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #recordFlutterError, [flutterErrorDetails], {#fatal: fatal}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> recordFlutterFatalError(
          _i10.FlutterErrorDetails? flutterErrorDetails) =>
      (super.noSuchMethod(
          Invocation.method(#recordFlutterFatalError, [flutterErrorDetails]),
          returnValue: _i9.Future<void>.value(),
          returnValueForMissingStub:
              _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> log(String? message) => (super.noSuchMethod(
      Invocation.method(#log, [message]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendUnsentReports() => (super.noSuchMethod(
      Invocation.method(#sendUnsentReports, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCrashlyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
              Invocation.method(#setCrashlyticsCollectionEnabled, [enabled]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> setUserIdentifier(String? identifier) => (super.noSuchMethod(
      Invocation.method(#setUserIdentifier, [identifier]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCustomKey(String? key, Object? value) =>
      (super.noSuchMethod(Invocation.method(#setCustomKey, [key, value]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
          returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)))
      as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set tenantId(String? tenantId) =>
      super.noSuchMethod(Invocation.setter(#tenantId, tenantId),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i9.Future<void> useEmulator(String? origin) => (super.noSuchMethod(
      Invocation.method(#useEmulator, [origin]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> useAuthEmulator(String? host, int? port) =>
      (super.noSuchMethod(Invocation.method(#useAuthEmulator, [host, port]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> applyActionCode(String? code) => (super.noSuchMethod(
      Invocation.method(#applyActionCode, [code]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i3.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#checkActionCode, [code]),
              returnValue: _i9.Future<_i3.ActionCodeInfo>.value(
                  _FakeActionCodeInfo_1(
                      this, Invocation.method(#checkActionCode, [code]))))
          as _i9.Future<_i3.ActionCodeInfo>);
  @override
  _i9.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
              Invocation.method(#confirmPasswordReset, [],
                  {#code: code, #newPassword: newPassword}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<_i4.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super
          .noSuchMethod(Invocation.method(#createUserWithEmailAndPassword, [], {#email: email, #password: password}),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this,
                      Invocation.method(#createUserWithEmailAndPassword, [], {
                        #email: email,
                        #password: password
                      })))) as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<List<String>> fetchSignInMethodsForEmail(String? email) => (super
          .noSuchMethod(Invocation.method(#fetchSignInMethodsForEmail, [email]),
              returnValue: _i9.Future<List<String>>.value(<String>[]))
      as _i9.Future<List<String>>);
  @override
  _i9.Future<_i4.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(Invocation.method(#getRedirectResult, []),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this, Invocation.method(#getRedirectResult, []))))
          as _i9.Future<_i4.UserCredential>);
  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
      Invocation.method(#isSignInWithEmailLink, [emailLink]),
      returnValue: false) as bool);
  @override
  _i9.Stream<_i4.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: _i9.Stream<_i4.User?>.empty()) as _i9.Stream<_i4.User?>);
  @override
  _i9.Stream<_i4.User?> idTokenChanges() =>
      (super.noSuchMethod(Invocation.method(#idTokenChanges, []),
          returnValue: _i9.Stream<_i4.User?>.empty()) as _i9.Stream<_i4.User?>);
  @override
  _i9.Stream<_i4.User?> userChanges() =>
      (super.noSuchMethod(Invocation.method(#userChanges, []),
          returnValue: _i9.Stream<_i4.User?>.empty()) as _i9.Stream<_i4.User?>);
  @override
  _i9.Future<void> sendPasswordResetEmail(
          {String? email, _i3.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
              Invocation.method(#sendPasswordResetEmail, [],
                  {#email: email, #actionCodeSettings: actionCodeSettings}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> sendSignInLinkToEmail(
          {String? email, _i3.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
              Invocation.method(#sendSignInLinkToEmail, [],
                  {#email: email, #actionCodeSettings: actionCodeSettings}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> setLanguageCode(String? languageCode) => (super.noSuchMethod(
      Invocation.method(#setLanguageCode, [languageCode]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setSettings(
          {bool? appVerificationDisabledForTesting,
          String? userAccessGroup,
          String? phoneNumber,
          String? smsCode,
          bool? forceRecaptchaFlow}) =>
      (super.noSuchMethod(
              Invocation.method(#setSettings, [], {
                #appVerificationDisabledForTesting:
                    appVerificationDisabledForTesting,
                #userAccessGroup: userAccessGroup,
                #phoneNumber: phoneNumber,
                #smsCode: smsCode,
                #forceRecaptchaFlow: forceRecaptchaFlow
              }),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> setPersistence(_i3.Persistence? persistence) =>
      (super.noSuchMethod(Invocation.method(#setPersistence, [persistence]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<_i4.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this, Invocation.method(#signInAnonymously, []))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.UserCredential> signInWithCredential(
          _i3.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithCredential, [credential]),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(this,
                      Invocation.method(#signInWithCredential, [credential]))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#signInWithCustomToken, [token]),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(this,
                      Invocation.method(#signInWithCustomToken, [token]))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super
          .noSuchMethod(Invocation.method(#signInWithEmailAndPassword, [], {#email: email, #password: password}),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this,
                      Invocation.method(#signInWithEmailAndPassword, [], {
                        #email: email,
                        #password: password
                      })))) as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.UserCredential> signInWithEmailLink(
          {String? email, String? emailLink}) =>
      (super
          .noSuchMethod(Invocation.method(#signInWithEmailLink, [], {#email: email, #emailLink: emailLink}),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this,
                      Invocation.method(#signInWithEmailLink, [], {
                        #email: email,
                        #emailLink: emailLink
                      })))) as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.UserCredential> signInWithAuthProvider(
          _i3.AuthProvider? provider) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithAuthProvider, [provider]),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(this,
                      Invocation.method(#signInWithAuthProvider, [provider]))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.ConfirmationResult> signInWithPhoneNumber(String? phoneNumber,
          [_i4.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: _i9.Future<_i4.ConfirmationResult>.value(
                  _FakeConfirmationResult_3(
                      this,
                      Invocation.method(
                          #signInWithPhoneNumber, [phoneNumber, verifier]))))
          as _i9.Future<_i4.ConfirmationResult>);
  @override
  _i9.Future<_i4.UserCredential> signInWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithPopup, [provider]),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this, Invocation.method(#signInWithPopup, [provider]))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<void> signInWithRedirect(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithRedirect, [provider]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> signOut() => (super.noSuchMethod(
      Invocation.method(#signOut, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#verifyPasswordResetCode, [code]),
          returnValue: _i9.Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<void> verifyPhoneNumber(
          {String? phoneNumber,
          _i3.PhoneMultiFactorInfo? multiFactorInfo,
          _i3.PhoneVerificationCompleted? verificationCompleted,
          _i3.PhoneVerificationFailed? verificationFailed,
          _i3.PhoneCodeSent? codeSent,
          _i3.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
          String? autoRetrievedSmsCodeForTesting,
          Duration? timeout = const Duration(seconds: 30),
          int? forceResendingToken,
          _i3.MultiFactorSession? multiFactorSession}) =>
      (super.noSuchMethod(
              Invocation.method(#verifyPhoneNumber, [], {
                #phoneNumber: phoneNumber,
                #multiFactorInfo: multiFactorInfo,
                #verificationCompleted: verificationCompleted,
                #verificationFailed: verificationFailed,
                #codeSent: codeSent,
                #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
                #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
                #timeout: timeout,
                #forceResendingToken: forceResendingToken,
                #multiFactorSession: multiFactorSession
              }),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i4.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i3.UserMetadata get metadata => (super.noSuchMethod(
          Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata_4(this, Invocation.getter(#metadata)))
      as _i3.UserMetadata);
  @override
  List<_i3.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i3.UserInfo>[]) as List<_i3.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i4.MultiFactor get multiFactor =>
      (super.noSuchMethod(Invocation.getter(#multiFactor),
              returnValue:
                  _FakeMultiFactor_5(this, Invocation.getter(#multiFactor)))
          as _i4.MultiFactor);
  @override
  _i9.Future<void> delete() => (super.noSuchMethod(
      Invocation.method(#delete, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: _i9.Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i3.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
          returnValue: _i9.Future<_i3.IdTokenResult>.value(_FakeIdTokenResult_6(
              this,
              Invocation.method(#getIdTokenResult, [forceRefresh])))) as _i9
          .Future<_i3.IdTokenResult>);
  @override
  _i9.Future<_i4.UserCredential> linkWithCredential(
          _i3.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(this,
                      Invocation.method(#linkWithCredential, [credential]))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.UserCredential> linkWithPopup(_i3.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#linkWithPopup, [provider]),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this, Invocation.method(#linkWithPopup, [provider]))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<_i4.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i4.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: _i9.Future<_i4.ConfirmationResult>.value(
                  _FakeConfirmationResult_3(
                      this,
                      Invocation.method(
                          #linkWithPhoneNumber, [phoneNumber, verifier]))))
          as _i9.Future<_i4.ConfirmationResult>);
  @override
  _i9.Future<_i4.UserCredential> reauthenticateWithCredential(
          _i3.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue: _i9.Future<_i4.UserCredential>.value(
                  _FakeUserCredential_2(
                      this,
                      Invocation.method(
                          #reauthenticateWithCredential, [credential]))))
          as _i9.Future<_i4.UserCredential>);
  @override
  _i9.Future<void> reload() => (super.noSuchMethod(
      Invocation.method(#reload, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendEmailVerification(
          [_i3.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
              Invocation.method(#sendEmailVerification, [actionCodeSettings]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<_i4.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: _i9.Future<_i4.User>.value(
                  _FakeUser_7(this, Invocation.method(#unlink, [providerId]))))
          as _i9.Future<_i4.User>);
  @override
  _i9.Future<void> updateEmail(String? newEmail) => (super.noSuchMethod(
      Invocation.method(#updateEmail, [newEmail]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePassword(String? newPassword) => (super.noSuchMethod(
      Invocation.method(#updatePassword, [newPassword]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhoneNumber(
          _i3.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
              Invocation.method(#updatePhoneNumber, [phoneCredential]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhotoURL(String? photoURL) => (super.noSuchMethod(
      Invocation.method(#updatePhotoURL, [photoURL]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
              Invocation.method(#updateProfile, [],
                  {#displayName: displayName, #photoURL: photoURL}),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i9.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i3.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
              Invocation.method(
                  #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
}

/// A class which mocks [GoogleSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignIn extends _i1.Mock implements _i5.GoogleSignIn {
  MockGoogleSignIn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.SignInOption get signInOption =>
      (super.noSuchMethod(Invocation.getter(#signInOption),
          returnValue: _i11.SignInOption.standard) as _i11.SignInOption);
  @override
  List<String> get scopes =>
      (super.noSuchMethod(Invocation.getter(#scopes), returnValue: <String>[])
          as List<String>);
  @override
  _i9.Stream<_i5.GoogleSignInAccount?> get onCurrentUserChanged =>
      (super.noSuchMethod(Invocation.getter(#onCurrentUserChanged),
              returnValue: _i9.Stream<_i5.GoogleSignInAccount?>.empty())
          as _i9.Stream<_i5.GoogleSignInAccount?>);
  @override
  _i9.Future<_i5.GoogleSignInAccount?> signInSilently(
          {bool? suppressErrors = true, bool? reAuthenticate = false}) =>
      (super.noSuchMethod(
              Invocation.method(#signInSilently, [], {
                #suppressErrors: suppressErrors,
                #reAuthenticate: reAuthenticate
              }),
              returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value())
          as _i9.Future<_i5.GoogleSignInAccount?>);
  @override
  _i9.Future<bool> isSignedIn() =>
      (super.noSuchMethod(Invocation.method(#isSignedIn, []),
          returnValue: _i9.Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i5.GoogleSignInAccount?> signIn() =>
      (super.noSuchMethod(Invocation.method(#signIn, []),
              returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value())
          as _i9.Future<_i5.GoogleSignInAccount?>);
  @override
  _i9.Future<_i5.GoogleSignInAccount?> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value())
          as _i9.Future<_i5.GoogleSignInAccount?>);
  @override
  _i9.Future<_i5.GoogleSignInAccount?> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
              returnValue: _i9.Future<_i5.GoogleSignInAccount?>.value())
          as _i9.Future<_i5.GoogleSignInAccount?>);
  @override
  _i9.Future<bool> requestScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#requestScopes, [scopes]),
          returnValue: _i9.Future<bool>.value(false)) as _i9.Future<bool>);
}

/// A class which mocks [GoogleSignInAccount].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoogleSignInAccount extends _i1.Mock
    implements _i5.GoogleSignInAccount {
  MockGoogleSignInAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i9.Future<_i5.GoogleSignInAuthentication> get authentication =>
      (super.noSuchMethod(Invocation.getter(#authentication),
              returnValue: _i9.Future<_i5.GoogleSignInAuthentication>.value(
                  _FakeGoogleSignInAuthentication_8(
                      this, Invocation.getter(#authentication))))
          as _i9.Future<_i5.GoogleSignInAuthentication>);
  @override
  _i9.Future<Map<String, String>> get authHeaders =>
      (super.noSuchMethod(Invocation.getter(#authHeaders),
              returnValue:
                  _i9.Future<Map<String, String>>.value(<String, String>{}))
          as _i9.Future<Map<String, String>>);
  @override
  _i9.Future<void> clearAuthCache() => (super.noSuchMethod(
      Invocation.method(#clearAuthCache, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [GoogleSignInAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAuthentication extends _i1.Mock
    implements _i5.GoogleSignInAuthentication {
  MockGoogleSignInAuthentication() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i7.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
          returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)))
      as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i6.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i6.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
          returnValue: _FakeSettings_9(this, Invocation.getter(#settings)))
      as _i6.Settings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_10<Map<String, dynamic>>(
                  this, Invocation.method(#collection, [collectionPath])))
          as _i7.CollectionReference<Map<String, dynamic>>);
  @override
  _i7.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
          returnValue: _FakeWriteBatch_11(this, Invocation.method(#batch, [])))
      as _i7.WriteBatch);
  @override
  _i9.Future<void> clearPersistence() => (super.noSuchMethod(
      Invocation.method(#clearPersistence, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> enablePersistence(
          [_i6.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
              Invocation.method(#enablePersistence, [persistenceSettings]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i7.LoadBundleTask loadBundle(_i12.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
              returnValue: _FakeLoadBundleTask_12(
                  this, Invocation.method(#loadBundle, [bundle])))
          as _i7.LoadBundleTask);
  @override
  void useFirestoreEmulator(String? host, int? port,
          {bool? sslEnabled = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #useFirestoreEmulator, [host, port], {#sslEnabled: sslEnabled}),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i7.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i6.GetOptions? options = const _i6.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: _i9.Future<_i7.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot_13<Map<String, dynamic>>(this,
                  Invocation.method(#namedQueryGet, [name], {#options: options})))) as _i9
          .Future<_i7.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i7.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery_14<Map<String, dynamic>>(
                  this, Invocation.method(#collectionGroup, [collectionPath])))
          as _i7.Query<Map<String, dynamic>>);
  @override
  _i9.Future<void> disableNetwork() => (super.noSuchMethod(
      Invocation.method(#disableNetwork, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i7.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference_15<Map<String, dynamic>>(
                  this, Invocation.method(#doc, [documentPath])))
          as _i7.DocumentReference<Map<String, dynamic>>);
  @override
  _i9.Future<void> enableNetwork() => (super.noSuchMethod(
      Invocation.method(#enableNetwork, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: _i9.Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i9.Future<T> runTransaction<T>(_i7.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30),
          int? maxAttempts = 5}) =>
      (super.noSuchMethod(
          Invocation.method(#runTransaction, [transactionHandler],
              {#timeout: timeout, #maxAttempts: maxAttempts}),
          returnValue: _i9.Future<T>.value(null)) as _i9.Future<T>);
  @override
  _i9.Future<void> terminate() => (super.noSuchMethod(
      Invocation.method(#terminate, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> waitForPendingWrites() => (super.noSuchMethod(
      Invocation.method(#waitForPendingWrites, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
          Invocation.getter(#reference),
          returnValue:
              _FakeDocumentReference_15<T>(this, Invocation.getter(#reference)))
      as _i7.DocumentReference<T>);
  @override
  _i7.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
              returnValue:
                  _FakeSnapshotMetadata_16(this, Invocation.getter(#metadata)))
          as _i7.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i7.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
          Invocation.getter(#firestore),
          returnValue:
              _FakeFirebaseFirestore_17(this, Invocation.getter(#firestore)))
      as _i7.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i9.Future<_i7.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: _i9.Future<_i7.DocumentReference<T>>.value(
                  _FakeDocumentReference_15<T>(
                      this, Invocation.method(#add, [data]))))
          as _i9.Future<_i7.DocumentReference<T>>);
  @override
  _i7.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
      Invocation.method(#doc, [path]),
      returnValue: _FakeDocumentReference_15<T>(
          this, Invocation.method(#doc, [path]))) as _i7.DocumentReference<T>);
  @override
  _i7.CollectionReference<R> withConverter<R extends Object?>(
          {_i7.FromFirestore<R>? fromFirestore,
          _i7.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference_10<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i7.CollectionReference<R>);
  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(
                  this, Invocation.method(#endAtDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
              returnValue:
                  _FakeQuery_14<T>(this, Invocation.method(#endAt, [values])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(this,
                  Invocation.method(#endBeforeDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> endBefore(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#endBefore, [values]),
          returnValue:
              _FakeQuery_14<T>(this, Invocation.method(#endBefore, [values])))
      as _i7.Query<T>);
  @override
  _i9.Future<_i7.QuerySnapshot<T>> get([_i6.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i9.Future<_i7.QuerySnapshot<T>>.value(
                  _FakeQuerySnapshot_13<T>(
                      this, Invocation.method(#get, [options]))))
          as _i9.Future<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
              returnValue:
                  _FakeQuery_14<T>(this, Invocation.method(#limit, [limit])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
          Invocation.method(#limitToLast, [limit]),
          returnValue:
              _FakeQuery_14<T>(this, Invocation.method(#limitToLast, [limit])))
      as _i7.Query<T>);
  @override
  _i9.Stream<_i7.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i9.Stream<_i7.QuerySnapshot<T>>.empty())
          as _i9.Stream<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
              Invocation.method(#orderBy, [field], {#descending: descending}),
              returnValue: _FakeQuery_14<T>(
                  this,
                  Invocation.method(
                      #orderBy, [field], {#descending: descending})))
          as _i7.Query<T>);
  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAfterDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(this,
                  Invocation.method(#startAfterDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> startAfter(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#startAfter, [values]),
          returnValue:
              _FakeQuery_14<T>(this, Invocation.method(#startAfter, [values])))
      as _i7.Query<T>);
  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(this,
                  Invocation.method(#startAtDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
              returnValue:
                  _FakeQuery_14<T>(this, Invocation.method(#startAt, [values])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_14<T>(
              this,
              Invocation.method(#where, [
                field
              ], {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull
              }))) as _i7.Query<T>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i7.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
          Invocation.getter(#firestore),
          returnValue:
              _FakeFirebaseFirestore_17(this, Invocation.getter(#firestore)))
      as _i7.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i7.CollectionReference<T> get parent => (super.noSuchMethod(
          Invocation.getter(#parent),
          returnValue:
              _FakeCollectionReference_10<T>(this, Invocation.getter(#parent)))
      as _i7.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_10<Map<String, dynamic>>(
                  this, Invocation.method(#collection, [collectionPath])))
          as _i7.CollectionReference<Map<String, dynamic>>);
  @override
  _i9.Future<void> delete() => (super.noSuchMethod(
      Invocation.method(#delete, []),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> update(Map<String, Object?>? data) => (super.noSuchMethod(
      Invocation.method(#update, [data]),
      returnValue: _i9.Future<void>.value(),
      returnValueForMissingStub: _i9.Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i7.DocumentSnapshot<T>> get([_i6.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i9.Future<_i7.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot_18<T>(
                      this, Invocation.method(#get, [options]))))
          as _i9.Future<_i7.DocumentSnapshot<T>>);
  @override
  _i9.Stream<_i7.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i9.Stream<_i7.DocumentSnapshot<T>>.empty())
          as _i9.Stream<_i7.DocumentSnapshot<T>>);
  @override
  _i9.Future<void> set(T? data, [_i6.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
              returnValue: _i9.Future<void>.value(),
              returnValueForMissingStub: _i9.Future<void>.value())
          as _i9.Future<void>);
  @override
  _i7.DocumentReference<R> withConverter<R>(
          {_i7.FromFirestore<R>? fromFirestore,
          _i7.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference_15<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i7.DocumentReference<R>);
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuery<T extends Object?> extends _i1.Mock implements _i7.Query<T> {
  MockQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
          Invocation.getter(#firestore),
          returnValue:
              _FakeFirebaseFirestore_17(this, Invocation.getter(#firestore)))
      as _i7.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(
                  this, Invocation.method(#endAtDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
              returnValue:
                  _FakeQuery_14<T>(this, Invocation.method(#endAt, [values])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(this,
                  Invocation.method(#endBeforeDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> endBefore(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#endBefore, [values]),
          returnValue:
              _FakeQuery_14<T>(this, Invocation.method(#endBefore, [values])))
      as _i7.Query<T>);
  @override
  _i9.Future<_i7.QuerySnapshot<T>> get([_i6.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i9.Future<_i7.QuerySnapshot<T>>.value(
                  _FakeQuerySnapshot_13<T>(
                      this, Invocation.method(#get, [options]))))
          as _i9.Future<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
              returnValue:
                  _FakeQuery_14<T>(this, Invocation.method(#limit, [limit])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
          Invocation.method(#limitToLast, [limit]),
          returnValue:
              _FakeQuery_14<T>(this, Invocation.method(#limitToLast, [limit])))
      as _i7.Query<T>);
  @override
  _i9.Stream<_i7.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i9.Stream<_i7.QuerySnapshot<T>>.empty())
          as _i9.Stream<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
              Invocation.method(#orderBy, [field], {#descending: descending}),
              returnValue: _FakeQuery_14<T>(
                  this,
                  Invocation.method(
                      #orderBy, [field], {#descending: descending})))
          as _i7.Query<T>);
  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAfterDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(this,
                  Invocation.method(#startAfterDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> startAfter(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#startAfter, [values]),
          returnValue:
              _FakeQuery_14<T>(this, Invocation.method(#startAfter, [values])))
      as _i7.Query<T>);
  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_14<T>(this,
                  Invocation.method(#startAtDocument, [documentSnapshot])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
              returnValue:
                  _FakeQuery_14<T>(this, Invocation.method(#startAt, [values])))
          as _i7.Query<T>);
  @override
  _i7.Query<T> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_14<T>(
              this,
              Invocation.method(#where, [
                field
              ], {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull
              }))) as _i7.Query<T>);
  @override
  _i7.Query<R> withConverter<R>(
          {_i7.FromFirestore<R>? fromFirestore,
          _i7.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeQuery_14<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i7.Query<R>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i7.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(Invocation.getter(#docs),
              returnValue: <_i7.QueryDocumentSnapshot<T>>[])
          as List<_i7.QueryDocumentSnapshot<T>>);
  @override
  List<_i7.DocumentChange<T>> get docChanges => (super.noSuchMethod(
      Invocation.getter(#docChanges),
      returnValue: <_i7.DocumentChange<T>>[]) as List<_i7.DocumentChange<T>>);
  @override
  _i7.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
              returnValue:
                  _FakeSnapshotMetadata_16(this, Invocation.getter(#metadata)))
          as _i7.SnapshotMetadata);
  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}
