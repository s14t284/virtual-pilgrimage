// Mocks generated by Mockito 5.3.0 from annotations
// in virtualpilgrimage/test/infrastructure/user/user_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i8;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i5;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:logger/src/logger.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSettings_1 extends _i1.SmartFake implements _i3.Settings {
  _FakeSettings_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCollectionReference_2<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWriteBatch_3 extends _i1.SmartFake implements _i4.WriteBatch {
  _FakeWriteBatch_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLoadBundleTask_4 extends _i1.SmartFake
    implements _i4.LoadBundleTask {
  _FakeLoadBundleTask_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_5<T extends Object?> extends _i1.SmartFake
    implements _i4.QuerySnapshot<T> {
  _FakeQuerySnapshot_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQuery_6<T extends Object?> extends _i1.SmartFake
    implements _i4.Query<T> {
  _FakeQuery_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentReference_7<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T> {
  _FakeDocumentReference_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeActionCodeInfo_8 extends _i1.SmartFake
    implements _i5.ActionCodeInfo {
  _FakeActionCodeInfo_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUserCredential_9 extends _i1.SmartFake
    implements _i6.UserCredential {
  _FakeUserCredential_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeConfirmationResult_10 extends _i1.SmartFake
    implements _i6.ConfirmationResult {
  _FakeConfirmationResult_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_11 extends _i1.SmartFake
    implements _i4.SnapshotMetadata {
  _FakeSnapshotMetadata_11(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFirebaseFirestore_12 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_12(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_13<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_13(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i4.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
          returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)))
      as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i3.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i3.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
          returnValue: _FakeSettings_1(this, Invocation.getter(#settings)))
      as _i3.Settings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
                  this, Invocation.method(#collection, [collectionPath])))
          as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i4.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
          returnValue: _FakeWriteBatch_3(this, Invocation.method(#batch, [])))
      as _i4.WriteBatch);
  @override
  _i7.Future<void> clearPersistence() => (super.noSuchMethod(
      Invocation.method(#clearPersistence, []),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> enablePersistence(
          [_i3.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
              Invocation.method(#enablePersistence, [persistenceSettings]),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i4.LoadBundleTask loadBundle(_i8.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
              returnValue: _FakeLoadBundleTask_4(
                  this, Invocation.method(#loadBundle, [bundle])))
          as _i4.LoadBundleTask);
  @override
  void useFirestoreEmulator(String? host, int? port,
          {bool? sslEnabled = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #useFirestoreEmulator, [host, port], {#sslEnabled: sslEnabled}),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i4.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i3.GetOptions? options = const _i3.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: _i7.Future<_i4.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot_5<Map<String, dynamic>>(this,
                  Invocation.method(#namedQueryGet, [name], {#options: options})))) as _i7
          .Future<_i4.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i4.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery_6<Map<String, dynamic>>(
                  this, Invocation.method(#collectionGroup, [collectionPath])))
          as _i4.Query<Map<String, dynamic>>);
  @override
  _i7.Future<void> disableNetwork() => (super.noSuchMethod(
      Invocation.method(#disableNetwork, []),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i4.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference_7<Map<String, dynamic>>(
                  this, Invocation.method(#doc, [documentPath])))
          as _i4.DocumentReference<Map<String, dynamic>>);
  @override
  _i7.Future<void> enableNetwork() => (super.noSuchMethod(
      Invocation.method(#enableNetwork, []),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: _i7.Stream<void>.empty()) as _i7.Stream<void>);
  @override
  _i7.Future<T> runTransaction<T>(_i4.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30),
          int? maxAttempts = 5}) =>
      (super.noSuchMethod(
          Invocation.method(#runTransaction, [transactionHandler],
              {#timeout: timeout, #maxAttempts: maxAttempts}),
          returnValue: _i7.Future<T>.value(null)) as _i7.Future<T>);
  @override
  _i7.Future<void> terminate() => (super.noSuchMethod(
      Invocation.method(#terminate, []),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> waitForPendingWrites() => (super.noSuchMethod(
      Invocation.method(#waitForPendingWrites, []),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i9.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#v, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void d(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#d, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void i(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#i, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void w(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#w, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void e(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#e, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void wtf(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#wtf, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void log(_i9.Level? level, dynamic message,
          [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
          Invocation.method(#log, [level, message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i6.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
          returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)))
      as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set tenantId(String? tenantId) =>
      super.noSuchMethod(Invocation.setter(#tenantId, tenantId),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i7.Future<void> useEmulator(String? origin) => (super.noSuchMethod(
      Invocation.method(#useEmulator, [origin]),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> useAuthEmulator(String? host, int? port) =>
      (super.noSuchMethod(Invocation.method(#useAuthEmulator, [host, port]),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<void> applyActionCode(String? code) => (super.noSuchMethod(
      Invocation.method(#applyActionCode, [code]),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i5.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#checkActionCode, [code]),
              returnValue: _i7.Future<_i5.ActionCodeInfo>.value(
                  _FakeActionCodeInfo_8(
                      this, Invocation.method(#checkActionCode, [code]))))
          as _i7.Future<_i5.ActionCodeInfo>);
  @override
  _i7.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
              Invocation.method(#confirmPasswordReset, [],
                  {#code: code, #newPassword: newPassword}),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<_i6.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super
          .noSuchMethod(Invocation.method(#createUserWithEmailAndPassword, [], {#email: email, #password: password}),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(
                      this,
                      Invocation.method(#createUserWithEmailAndPassword, [], {
                        #email: email,
                        #password: password
                      })))) as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<List<String>> fetchSignInMethodsForEmail(String? email) => (super
          .noSuchMethod(Invocation.method(#fetchSignInMethodsForEmail, [email]),
              returnValue: _i7.Future<List<String>>.value(<String>[]))
      as _i7.Future<List<String>>);
  @override
  _i7.Future<_i6.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(Invocation.method(#getRedirectResult, []),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(
                      this, Invocation.method(#getRedirectResult, []))))
          as _i7.Future<_i6.UserCredential>);
  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
      Invocation.method(#isSignInWithEmailLink, [emailLink]),
      returnValue: false) as bool);
  @override
  _i7.Stream<_i6.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: _i7.Stream<_i6.User?>.empty()) as _i7.Stream<_i6.User?>);
  @override
  _i7.Stream<_i6.User?> idTokenChanges() =>
      (super.noSuchMethod(Invocation.method(#idTokenChanges, []),
          returnValue: _i7.Stream<_i6.User?>.empty()) as _i7.Stream<_i6.User?>);
  @override
  _i7.Stream<_i6.User?> userChanges() =>
      (super.noSuchMethod(Invocation.method(#userChanges, []),
          returnValue: _i7.Stream<_i6.User?>.empty()) as _i7.Stream<_i6.User?>);
  @override
  _i7.Future<void> sendPasswordResetEmail(
          {String? email, _i5.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
              Invocation.method(#sendPasswordResetEmail, [],
                  {#email: email, #actionCodeSettings: actionCodeSettings}),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<void> sendSignInLinkToEmail(
          {String? email, _i5.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
              Invocation.method(#sendSignInLinkToEmail, [],
                  {#email: email, #actionCodeSettings: actionCodeSettings}),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<void> setLanguageCode(String? languageCode) => (super.noSuchMethod(
      Invocation.method(#setLanguageCode, [languageCode]),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> setSettings(
          {bool? appVerificationDisabledForTesting,
          String? userAccessGroup,
          String? phoneNumber,
          String? smsCode,
          bool? forceRecaptchaFlow}) =>
      (super.noSuchMethod(
              Invocation.method(#setSettings, [], {
                #appVerificationDisabledForTesting:
                    appVerificationDisabledForTesting,
                #userAccessGroup: userAccessGroup,
                #phoneNumber: phoneNumber,
                #smsCode: smsCode,
                #forceRecaptchaFlow: forceRecaptchaFlow
              }),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<void> setPersistence(_i5.Persistence? persistence) =>
      (super.noSuchMethod(Invocation.method(#setPersistence, [persistence]),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<_i6.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, []),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(
                      this, Invocation.method(#signInAnonymously, []))))
          as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<_i6.UserCredential> signInWithCredential(
          _i5.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithCredential, [credential]),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(this,
                      Invocation.method(#signInWithCredential, [credential]))))
          as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<_i6.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#signInWithCustomToken, [token]),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(this,
                      Invocation.method(#signInWithCustomToken, [token]))))
          as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<_i6.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super
          .noSuchMethod(Invocation.method(#signInWithEmailAndPassword, [], {#email: email, #password: password}),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(
                      this,
                      Invocation.method(#signInWithEmailAndPassword, [], {
                        #email: email,
                        #password: password
                      })))) as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<_i6.UserCredential> signInWithEmailLink(
          {String? email, String? emailLink}) =>
      (super
          .noSuchMethod(Invocation.method(#signInWithEmailLink, [], {#email: email, #emailLink: emailLink}),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(
                      this,
                      Invocation.method(#signInWithEmailLink, [], {
                        #email: email,
                        #emailLink: emailLink
                      })))) as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<_i6.UserCredential> signInWithAuthProvider(
          _i5.AuthProvider? provider) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithAuthProvider, [provider]),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(this,
                      Invocation.method(#signInWithAuthProvider, [provider]))))
          as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<_i6.ConfirmationResult> signInWithPhoneNumber(String? phoneNumber,
          [_i6.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: _i7.Future<_i6.ConfirmationResult>.value(
                  _FakeConfirmationResult_10(
                      this,
                      Invocation.method(
                          #signInWithPhoneNumber, [phoneNumber, verifier]))))
          as _i7.Future<_i6.ConfirmationResult>);
  @override
  _i7.Future<_i6.UserCredential> signInWithPopup(_i5.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithPopup, [provider]),
              returnValue: _i7.Future<_i6.UserCredential>.value(
                  _FakeUserCredential_9(
                      this, Invocation.method(#signInWithPopup, [provider]))))
          as _i7.Future<_i6.UserCredential>);
  @override
  _i7.Future<void> signInWithRedirect(_i5.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithRedirect, [provider]),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<void> signOut() => (super.noSuchMethod(
      Invocation.method(#signOut, []),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#verifyPasswordResetCode, [code]),
          returnValue: _i7.Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<void> verifyPhoneNumber(
          {String? phoneNumber,
          _i5.PhoneMultiFactorInfo? multiFactorInfo,
          _i5.PhoneVerificationCompleted? verificationCompleted,
          _i5.PhoneVerificationFailed? verificationFailed,
          _i5.PhoneCodeSent? codeSent,
          _i5.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
          String? autoRetrievedSmsCodeForTesting,
          Duration? timeout = const Duration(seconds: 30),
          int? forceResendingToken,
          _i5.MultiFactorSession? multiFactorSession}) =>
      (super.noSuchMethod(
              Invocation.method(#verifyPhoneNumber, [], {
                #phoneNumber: phoneNumber,
                #multiFactorInfo: multiFactorInfo,
                #verificationCompleted: verificationCompleted,
                #verificationFailed: verificationFailed,
                #codeSent: codeSent,
                #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
                #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
                #timeout: timeout,
                #forceResendingToken: forceResendingToken,
                #multiFactorSession: multiFactorSession
              }),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i4.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.DocumentReference<T> get reference => (super.noSuchMethod(
          Invocation.getter(#reference),
          returnValue:
              _FakeDocumentReference_7<T>(this, Invocation.getter(#reference)))
      as _i4.DocumentReference<T>);
  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
              returnValue:
                  _FakeSnapshotMetadata_11(this, Invocation.getter(#metadata)))
          as _i4.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i4.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
          Invocation.getter(#firestore),
          returnValue:
              _FakeFirebaseFirestore_12(this, Invocation.getter(#firestore)))
      as _i4.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i7.Future<_i4.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: _i7.Future<_i4.DocumentReference<T>>.value(
                  _FakeDocumentReference_7<T>(
                      this, Invocation.method(#add, [data]))))
          as _i7.Future<_i4.DocumentReference<T>>);
  @override
  _i4.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
      Invocation.method(#doc, [path]),
      returnValue: _FakeDocumentReference_7<T>(
          this, Invocation.method(#doc, [path]))) as _i4.DocumentReference<T>);
  @override
  _i4.CollectionReference<R> withConverter<R extends Object?>(
          {_i4.FromFirestore<R>? fromFirestore,
          _i4.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference_2<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i4.CollectionReference<R>);
  @override
  _i4.Query<T> endAtDocument(_i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(
                  this, Invocation.method(#endAtDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
              returnValue:
                  _FakeQuery_6<T>(this, Invocation.method(#endAt, [values])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> endBeforeDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(this,
                  Invocation.method(#endBeforeDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> endBefore(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#endBefore, [values]),
          returnValue:
              _FakeQuery_6<T>(this, Invocation.method(#endBefore, [values])))
      as _i4.Query<T>);
  @override
  _i7.Future<_i4.QuerySnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i7.Future<_i4.QuerySnapshot<T>>.value(
                  _FakeQuerySnapshot_5<T>(
                      this, Invocation.method(#get, [options]))))
          as _i7.Future<_i4.QuerySnapshot<T>>);
  @override
  _i4.Query<T> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
              returnValue:
                  _FakeQuery_6<T>(this, Invocation.method(#limit, [limit])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
          Invocation.method(#limitToLast, [limit]),
          returnValue:
              _FakeQuery_6<T>(this, Invocation.method(#limitToLast, [limit])))
      as _i4.Query<T>);
  @override
  _i7.Stream<_i4.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i7.Stream<_i4.QuerySnapshot<T>>.empty())
          as _i7.Stream<_i4.QuerySnapshot<T>>);
  @override
  _i4.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
              Invocation.method(#orderBy, [field], {#descending: descending}),
              returnValue: _FakeQuery_6<T>(
                  this,
                  Invocation.method(
                      #orderBy, [field], {#descending: descending})))
          as _i4.Query<T>);
  @override
  _i4.Query<T> startAfterDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAfterDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(this,
                  Invocation.method(#startAfterDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> startAfter(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#startAfter, [values]),
          returnValue:
              _FakeQuery_6<T>(this, Invocation.method(#startAfter, [values])))
      as _i4.Query<T>);
  @override
  _i4.Query<T> startAtDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(this,
                  Invocation.method(#startAtDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
              returnValue:
                  _FakeQuery_6<T>(this, Invocation.method(#startAt, [values])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#where, [
                field
              ], {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull
              }))) as _i4.Query<T>);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i4.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
          Invocation.getter(#firestore),
          returnValue:
              _FakeFirebaseFirestore_12(this, Invocation.getter(#firestore)))
      as _i4.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.CollectionReference<T> get parent => (super.noSuchMethod(
          Invocation.getter(#parent),
          returnValue:
              _FakeCollectionReference_2<T>(this, Invocation.getter(#parent)))
      as _i4.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
                  this, Invocation.method(#collection, [collectionPath])))
          as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i7.Future<void> delete() => (super.noSuchMethod(
      Invocation.method(#delete, []),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> update(Map<String, Object?>? data) => (super.noSuchMethod(
      Invocation.method(#update, [data]),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i4.DocumentSnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i7.Future<_i4.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot_13<T>(
                      this, Invocation.method(#get, [options]))))
          as _i7.Future<_i4.DocumentSnapshot<T>>);
  @override
  _i7.Stream<_i4.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i7.Stream<_i4.DocumentSnapshot<T>>.empty())
          as _i7.Stream<_i4.DocumentSnapshot<T>>);
  @override
  _i7.Future<void> set(T? data, [_i3.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i4.DocumentReference<R> withConverter<R>(
          {_i4.FromFirestore<R>? fromFirestore,
          _i4.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference_7<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i4.DocumentReference<R>);
}
